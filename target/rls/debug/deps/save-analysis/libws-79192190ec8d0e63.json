{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.18.1","compilation":{"directory":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57],"program":"/Users/collierl/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","ws","/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","--color","never","--crate-type","lib","--emit=dep-info,metadata","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=79192190ec8d0e63","-C","extra-filename=-79192190ec8d0e63","--out-dir","/Users/collierl/Project/Tinker/sink/target/rls/debug/deps","-L","dependency=/Users/collierl/Project/Tinker/sink/target/rls/debug/deps","--extern","byteorder=/Users/collierl/Project/Tinker/sink/target/rls/debug/deps/libbyteorder-60a1d7e5cbebabea.rmeta","--extern","bytes=/Users/collierl/Project/Tinker/sink/target/rls/debug/deps/libbytes-a3b9c5879a488947.rmeta","--extern","httparse=/Users/collierl/Project/Tinker/sink/target/rls/debug/deps/libhttparse-79901879918decf9.rmeta","--extern","log=/Users/collierl/Project/Tinker/sink/target/rls/debug/deps/liblog-93c1b4f7a2bb5626.rmeta","--extern","mio=/Users/collierl/Project/Tinker/sink/target/rls/debug/deps/libmio-a0ab6b24271c5ce5.rmeta","--extern","mio_extras=/Users/collierl/Project/Tinker/sink/target/rls/debug/deps/libmio_extras-95ec33c131f717f5.rmeta","--extern","rand=/Users/collierl/Project/Tinker/sink/target/rls/debug/deps/librand-18a853881b97e7ff.rmeta","--extern","sha1=/Users/collierl/Project/Tinker/sink/target/rls/debug/deps/libsha1-4911de8f4f601173.rmeta","--extern","slab=/Users/collierl/Project/Tinker/sink/target/rls/debug/deps/libslab-debe26aed1e3d2b3.rmeta","--extern","url=/Users/collierl/Project/Tinker/sink/target/rls/debug/deps/liburl-3fb2cfe32c436d73.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/collierl/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,80,114,111,106,101,99,116,47,84,105,110,107,101,114,47,115,105,110,107,47,116,97,114,103,101,116,47,114,108,115,47,100,101,98,117,103,47,100,101,112,115,47,108,105,98,119,115,45,55,57,49,57,50,49,57,48,101,99,56,100,48,101,54,51,46,114,109,101,116,97]},"prelude":{"crate_id":{"name":"ws","disambiguator":[12691878534563283759,7804789434564840998]},"crate_root":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src","external_crates":[{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[4680476137390187807,17118232108371533317]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[395860541893199504,14119727998271152369]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[1883751235990237101,13050952199660841280]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[14992191205204974336,187257134115189521]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":5,"id":{"name":"libc","disambiguator":[13711397750981643997,5466272945196031893]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":6,"id":{"name":"unwind","disambiguator":[3859305508273286470,8854496368734295790]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":7,"id":{"name":"panic_unwind","disambiguator":[3472742474031782457,1873693969544132989]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":8,"id":{"name":"byteorder","disambiguator":[16395496367316442964,15888132063759411635]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":9,"id":{"name":"bytes","disambiguator":[4014099319077927884,2910649618113442504]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":10,"id":{"name":"iovec","disambiguator":[15313467456506947546,360484904647614346]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":11,"id":{"name":"libc","disambiguator":[3707162357220673645,15357951539930907723]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":12,"id":{"name":"httparse","disambiguator":[11743552846218216182,13617553443692376827]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":13,"id":{"name":"mio","disambiguator":[13054995213862449096,12071830413399954959]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":14,"id":{"name":"lazycell","disambiguator":[8730350728616449741,1232539206503404815]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":15,"id":{"name":"net2","disambiguator":[15886358752634751876,17892069556162118851]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":16,"id":{"name":"cfg_if","disambiguator":[10894645249058885021,14958515863332726098]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":17,"id":{"name":"slab","disambiguator":[2316406832777038141,7330438601975841327]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":18,"id":{"name":"log","disambiguator":[12959512374038477399,8940388748031218319]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":19,"id":{"name":"mio_extras","disambiguator":[15340466328232819969,2488971304399413357]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":20,"id":{"name":"rand","disambiguator":[2426627672174461571,4155979263123872368]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":21,"id":{"name":"sha1","disambiguator":[9074461826650995542,13199351745000400422]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":22,"id":{"name":"url","disambiguator":[2170484018958014754,471113439668530789]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":23,"id":{"name":"matches","disambiguator":[16667780061090681493,11382387964560995969]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":24,"id":{"name":"idna","disambiguator":[17402543331744260685,8864470692457016598]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":25,"id":{"name":"unicode_bidi","disambiguator":[14048082493413215286,17100406170371430487]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":26,"id":{"name":"unicode_normalization","disambiguator":[17781007624342578619,2044950232013000319]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":27,"id":{"name":"smallvec","disambiguator":[14386391910284768324,17015775075564270683]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":28,"id":{"name":"unreachable","disambiguator":[3752386763560301286,11252175638379290583]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":29,"id":{"name":"void","disambiguator":[4520430280545068234,14751026919973907533]}},{"file_name":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","num":30,"id":{"name":"percent_encoding","disambiguator":[10143965031898755873,7988872904387506128]}}],"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":13554,"line_start":1,"line_end":387,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":13,"index":3196},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,117,116,105,108,46,114,115],"byte_start":196128,"byte_end":196133,"line_start":4,"line_end":4,"column_start":14,"column_end":19},"alias_span":null,"name":"Token","value":"","parent":{"krate":0,"index":1052}},{"kind":"Use","ref_id":{"krate":19,"index":334},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,117,116,105,108,46,114,115],"byte_start":196198,"byte_end":196205,"line_start":6,"line_end":6,"column_start":28,"column_end":35},"alias_span":null,"name":"Timeout","value":"","parent":{"krate":0,"index":1052}},{"kind":"Use","ref_id":{"krate":0,"index":256},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":754,"byte_end":761,"line_start":39,"line_end":39,"column_start":18,"column_end":25},"alias_span":null,"name":"Factory","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":458},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":780,"byte_end":787,"line_start":40,"line_end":40,"column_start":18,"column_end":25},"alias_span":null,"name":"Handler","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1158},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":813,"byte_end":819,"line_start":42,"line_end":42,"column_start":24,"column_end":30},"alias_span":null,"name":"Sender","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1204},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":836,"byte_end":841,"line_start":43,"line_end":43,"column_start":16,"column_end":21},"alias_span":null,"name":"Frame","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1228},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":863,"byte_end":872,"line_start":44,"line_end":44,"column_start":21,"column_end":30},"alias_span":null,"name":"Handshake","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1234},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":874,"byte_end":881,"line_start":44,"line_end":44,"column_start":32,"column_end":39},"alias_span":null,"name":"Request","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1240},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":883,"byte_end":891,"line_start":44,"line_end":44,"column_start":41,"column_end":49},"alias_span":null,"name":"Response","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1258},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":911,"byte_end":918,"line_start":45,"line_end":45,"column_start":18,"column_end":25},"alias_span":null,"name":"Message","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1298},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":939,"byte_end":948,"line_start":46,"line_end":46,"column_start":20,"column_end":29},"alias_span":null,"name":"CloseCode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1278},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":950,"byte_end":956,"line_start":46,"line_end":46,"column_start":31,"column_end":37},"alias_span":null,"name":"OpCode","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1320},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":975,"byte_end":979,"line_start":47,"line_end":47,"column_start":17,"column_end":21},"alias_span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":983,"byte_end":992,"line_start":47,"line_end":47,"column_start":25,"column_end":34},"name":"ErrorKind","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":944},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1011,"byte_end":1016,"line_start":48,"line_end":48,"column_start":18,"column_end":23},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":942},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1018,"byte_end":1024,"line_start":48,"line_end":48,"column_start":25,"column_end":31},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":13554,"line_start":1,"line_end":387,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":100},{"krate":0,"index":250},{"krate":0,"index":312},{"krate":0,"index":424},{"krate":0,"index":518},{"krate":0,"index":660},{"krate":0,"index":808},{"krate":0,"index":874},{"krate":0,"index":916},{"krate":0,"index":986},{"krate":0,"index":1052},{"krate":0,"index":1058},{"krate":0,"index":1060},{"krate":0,"index":1062},{"krate":0,"index":1064},{"krate":0,"index":1066},{"krate":0,"index":1074},{"krate":0,"index":1076},{"krate":0,"index":1082},{"krate":0,"index":1084},{"krate":0,"index":1090},{"krate":0,"index":1092},{"krate":0,"index":1094},{"krate":0,"index":1096},{"krate":0,"index":1102},{"krate":0,"index":1104},{"krate":0,"index":1106},{"krate":0,"index":1326},{"krate":0,"index":1334},{"krate":0,"index":1330},{"krate":0,"index":1328},{"krate":0,"index":1108},{"krate":0,"index":1112},{"krate":0,"index":1114},{"krate":0,"index":1338},{"krate":0,"index":1350},{"krate":0,"index":1346},{"krate":0,"index":1342},{"krate":0,"index":1340},{"krate":0,"index":1130}],"decl_id":null,"docs":" Lightweight, event-driven WebSockets for Rust.\n","sig":null,"attributes":[{"value":"allow(deprecated)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":51,"byte_end":72,"line_start":2,"line_end":2,"column_start":1,"column_end":22}},{"value":"deny(missing_copy_implementations,\n       trivial_casts,\n       trivial_numeric_casts,\n       unstable_features,\n       unused_import_braces)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":73,"byte_end":198,"line_start":3,"line_end":4,"column_start":1,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":255},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":13836,"byte_end":13843,"line_start":18,"line_end":18,"column_start":5,"column_end":12},"name":"Message","qualname":"::communication::Signal::Message","value":"Signal::Message(message::Message)","parent":{"krate":0,"index":1138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":259},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":13867,"byte_end":13872,"line_start":19,"line_end":19,"column_start":5,"column_end":10},"name":"Close","qualname":"::communication::Signal::Close","value":"Signal::Close(CloseCode, Cow<'static, str>)","parent":{"krate":0,"index":1138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":265},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":13908,"byte_end":13912,"line_start":20,"line_end":20,"column_start":5,"column_end":9},"name":"Ping","qualname":"::communication::Signal::Ping","value":"Signal::Ping(Vec<u8>)","parent":{"krate":0,"index":1138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":269},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":13927,"byte_end":13931,"line_start":21,"line_end":21,"column_start":5,"column_end":9},"name":"Pong","qualname":"::communication::Signal::Pong","value":"Signal::Pong(Vec<u8>)","parent":{"krate":0,"index":1138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":273},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":13946,"byte_end":13953,"line_start":22,"line_end":22,"column_start":5,"column_end":12},"name":"Connect","qualname":"::communication::Signal::Connect","value":"Signal::Connect(url::Url)","parent":{"krate":0,"index":1138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":277},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":13969,"byte_end":13977,"line_start":23,"line_end":23,"column_start":5,"column_end":13},"name":"Shutdown","qualname":"::communication::Signal::Shutdown","value":"Signal::Shutdown","parent":{"krate":0,"index":1138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"StructVariant","id":{"krate":0,"index":279},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":13983,"byte_end":13990,"line_start":24,"line_end":24,"column_start":5,"column_end":12},"name":"Timeout","qualname":"::communication::Signal::Timeout","value":"Signal::Timeout { delay, token }","parent":{"krate":0,"index":1138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":285},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14025,"byte_end":14031,"line_start":25,"line_end":25,"column_start":5,"column_end":11},"name":"Cancel","qualname":"::communication::Signal::Cancel","value":"Signal::Cancel(Timeout)","parent":{"krate":0,"index":1138},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1138},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":13823,"byte_end":13829,"line_start":17,"line_end":17,"column_start":10,"column_end":16},"name":"Signal","qualname":"::communication::Signal","value":"Signal::{Message, Close, Ping, Pong, Connect, Shutdown, Timeout, Cancel}","parent":null,"children":[{"krate":0,"index":255},{"krate":0,"index":259},{"krate":0,"index":265},{"krate":0,"index":269},{"krate":0,"index":273},{"krate":0,"index":277},{"krate":0,"index":279},{"krate":0,"index":285}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1148},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14080,"byte_end":14087,"line_start":29,"line_end":29,"column_start":12,"column_end":19},"name":"Command","qualname":"::communication::Command","value":"Command {  }","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":291},{"krate":0,"index":293}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14181,"byte_end":14186,"line_start":36,"line_end":36,"column_start":12,"column_end":17},"name":"token","qualname":"<Command>::token","value":"fn (&self) -> Token","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14242,"byte_end":14253,"line_start":40,"line_end":40,"column_start":12,"column_end":23},"name":"into_signal","qualname":"<Command>::into_signal","value":"fn (self) -> Signal","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14310,"byte_end":14323,"line_start":44,"line_end":44,"column_start":12,"column_end":25},"name":"connection_id","qualname":"<Command>::connection_id","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1158},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14521,"byte_end":14527,"line_start":52,"line_end":52,"column_start":12,"column_end":18},"name":"Sender","qualname":"::communication::Sender","value":"Sender {  }","parent":null,"children":[{"krate":0,"index":295},{"krate":0,"index":297},{"krate":0,"index":299}],"decl_id":null,"docs":" A representation of the output of the WebSocket connection. Use this to send messages to the\n other endpoint.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":15104,"byte_end":15107,"line_start":75,"line_end":75,"column_start":12,"column_end":15},"name":"new","qualname":"<Sender>::new","value":"fn (token: Token, channel: mio::channel::SyncSender<Command>, connection_id: u32) -> Sender","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":15083,"byte_end":15092,"line_start":74,"line_end":74,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":15417,"byte_end":15422,"line_start":89,"line_end":89,"column_start":12,"column_end":17},"name":"token","qualname":"<Sender>::token","value":"fn (&self) -> Token","parent":null,"children":[],"decl_id":null,"docs":" A Token identifying this sender within the WebSocket.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":15396,"byte_end":15405,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":15562,"byte_end":15575,"line_start":95,"line_end":95,"column_start":12,"column_end":25},"name":"connection_id","qualname":"<Sender>::connection_id","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" A connection_id identifying this sender within the WebSocket.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":15541,"byte_end":15550,"line_start":94,"line_end":94,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":15695,"byte_end":15699,"line_start":101,"line_end":101,"column_start":12,"column_end":16},"name":"send","qualname":"<Sender>::send","value":"fn <M> (&self, msg: M) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Send a message over the connection.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":15674,"byte_end":15683,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":16615,"byte_end":16624,"line_start":122,"line_end":122,"column_start":12,"column_end":21},"name":"broadcast","qualname":"<Sender>::broadcast","value":"fn <M> (&self, msg: M) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Send a message to the endpoints of all connections.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":16594,"byte_end":16603,"line_start":121,"line_end":121,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":17019,"byte_end":17024,"line_start":137,"line_end":137,"column_start":12,"column_end":17},"name":"close","qualname":"<Sender>::close","value":"fn (&self, code: CloseCode) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Send a close code to the other endpoint.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":16998,"byte_end":17007,"line_start":136,"line_end":136,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":17409,"byte_end":17426,"line_start":149,"line_end":149,"column_start":12,"column_end":29},"name":"close_with_reason","qualname":"<Sender>::close_with_reason","value":"fn <S> (&self, code: CloseCode, reason: S) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Send a close code and provide a descriptive reason for closing.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":17388,"byte_end":17397,"line_start":148,"line_end":148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":17875,"byte_end":17879,"line_start":164,"line_end":164,"column_start":12,"column_end":16},"name":"ping","qualname":"<Sender>::ping","value":"fn (&self, data: Vec<u8>) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Send a ping to the other endpoint with the given test data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":17854,"byte_end":17863,"line_start":163,"line_end":163,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":18257,"byte_end":18261,"line_start":176,"line_end":176,"column_start":12,"column_end":16},"name":"pong","qualname":"<Sender>::pong","value":"fn (&self, data: Vec<u8>) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Send a pong to the other endpoint responding with the given test data.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":18236,"byte_end":18245,"line_start":175,"line_end":175,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":18631,"byte_end":18638,"line_start":188,"line_end":188,"column_start":12,"column_end":19},"name":"connect","qualname":"<Sender>::connect","value":"fn (&self, url: url::Url) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Queue a new connection on this WebSocket to the specified URL.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":18610,"byte_end":18619,"line_start":187,"line_end":187,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":19023,"byte_end":19031,"line_start":200,"line_end":200,"column_start":12,"column_end":20},"name":"shutdown","qualname":"<Sender>::shutdown","value":"fn (&self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Request that all connections terminate and that the WebSocket stop running.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":19002,"byte_end":19011,"line_start":199,"line_end":199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":19430,"byte_end":19437,"line_start":213,"line_end":213,"column_start":12,"column_end":19},"name":"timeout","qualname":"<Sender>::timeout","value":"fn (&self, ms: u64, token: Token) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Schedule a `token` to be sent to the WebSocket Handler's `on_timeout` method\n after `ms` milliseconds\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":19409,"byte_end":19418,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":20061,"byte_end":20067,"line_start":229,"line_end":229,"column_start":12,"column_end":18},"name":"cancel","qualname":"<Sender>::cancel","value":"fn (&self, timeout: Timeout) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Queue the cancellation of a previously scheduled timeout.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":20040,"byte_end":20049,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":256},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":69033,"byte_end":69040,"line_start":5,"line_end":5,"column_start":11,"column_end":18},"name":"Factory","qualname":"::factory::Factory","value":"Factory","parent":null,"children":[{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":264},{"krate":0,"index":266},{"krate":0,"index":268}],"decl_id":null,"docs":" A trait for creating new WebSocket handlers.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":258},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":69052,"byte_end":69059,"line_start":6,"line_end":6,"column_start":10,"column_end":17},"name":"Handler","qualname":"::factory::Factory::Handler","value":"type Handler: Handler;","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":69124,"byte_end":69139,"line_start":9,"line_end":9,"column_start":8,"column_end":23},"name":"connection_made","qualname":"::factory::Factory::connection_made","value":"fn (&mut self, _: Sender) -> Self::Handler","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Called when a TCP connection is made.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":69254,"byte_end":69265,"line_start":13,"line_end":13,"column_start":8,"column_end":19},"name":"on_shutdown","qualname":"::factory::Factory::on_shutdown","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Called when the WebSocket is shutting down.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":69237,"byte_end":69246,"line_start":12,"line_end":12,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":70320,"byte_end":70336,"line_start":52,"line_end":52,"column_start":8,"column_end":24},"name":"client_connected","qualname":"::factory::Factory::client_connected","value":"fn (&mut self, ws: Sender) -> Self::Handler","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Called when a new connection is established for a client endpoint.\n This method can be used to differentiate a client aspect for a handler.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":70303,"byte_end":70312,"line_start":51,"line_end":51,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":71377,"byte_end":71393,"line_start":90,"line_end":90,"column_start":8,"column_end":24},"name":"server_connected","qualname":"::factory::Factory::server_connected","value":"fn (&mut self, ws: Sender) -> Self::Handler","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Called when a new connection is established for a server endpoint.\n This method can be used to differentiate a server aspect for a handler.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":71360,"byte_end":71369,"line_start":89,"line_end":89,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":268},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":71826,"byte_end":71841,"line_start":101,"line_end":101,"column_start":8,"column_end":23},"name":"connection_lost","qualname":"::factory::Factory::connection_lost","value":"fn (&mut self, _: Self::Handler) -> ()","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Called when a TCP connection is lost with the handler that was\n setup for that connection.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":71809,"byte_end":71818,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1204},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":74318,"byte_end":74323,"line_start":21,"line_end":21,"column_start":12,"column_end":17},"name":"Frame","qualname":"::frame::Frame","value":"Frame {  }","parent":null,"children":[{"krate":0,"index":327},{"krate":0,"index":329},{"krate":0,"index":331},{"krate":0,"index":333},{"krate":0,"index":335},{"krate":0,"index":337},{"krate":0,"index":341}],"decl_id":null,"docs":" A struct representing a WebSocket frame.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":358},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":74613,"byte_end":74616,"line_start":37,"line_end":37,"column_start":12,"column_end":15},"name":"len","qualname":"<Frame>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the frame.\n This is the length of the header + the length of the payload.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":74592,"byte_end":74601,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":360},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":75136,"byte_end":75144,"line_start":57,"line_end":57,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Frame>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Return `false`: a frame is never empty since it has a header.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":75115,"byte_end":75124,"line_start":56,"line_end":56,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":75257,"byte_end":75265,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"is_final","qualname":"<Frame>::is_final","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the frame is a final frame.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":75236,"byte_end":75245,"line_start":62,"line_end":62,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":75389,"byte_end":75397,"line_start":69,"line_end":69,"column_start":12,"column_end":20},"name":"has_rsv1","qualname":"<Frame>::has_rsv1","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the first reserved bit is set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":75368,"byte_end":75377,"line_start":68,"line_end":68,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":366},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":75518,"byte_end":75526,"line_start":75,"line_end":75,"column_start":12,"column_end":20},"name":"has_rsv2","qualname":"<Frame>::has_rsv2","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the second reserved bit is set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":75497,"byte_end":75506,"line_start":74,"line_end":74,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":75646,"byte_end":75654,"line_start":81,"line_end":81,"column_start":12,"column_end":20},"name":"has_rsv3","qualname":"<Frame>::has_rsv3","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the third reserved bit is set.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":75625,"byte_end":75634,"line_start":80,"line_end":80,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":370},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":75759,"byte_end":75765,"line_start":87,"line_end":87,"column_start":12,"column_end":18},"name":"opcode","qualname":"<Frame>::opcode","value":"fn (&self) -> OpCode","parent":null,"children":[],"decl_id":null,"docs":" Get the OpCode of the frame.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":75738,"byte_end":75747,"line_start":86,"line_end":86,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":372},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":75883,"byte_end":75893,"line_start":93,"line_end":93,"column_start":12,"column_end":22},"name":"is_control","qualname":"<Frame>::is_control","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether this is a control frame.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":75862,"byte_end":75871,"line_start":92,"line_end":92,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":374},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76024,"byte_end":76031,"line_start":99,"line_end":99,"column_start":12,"column_end":19},"name":"payload","qualname":"<Frame>::payload","value":"fn (&self) -> &Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Get a reference to the frame's payload.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76003,"byte_end":76012,"line_start":98,"line_end":98,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":376},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76167,"byte_end":76176,"line_start":106,"line_end":106,"column_start":12,"column_end":21},"name":"is_masked","qualname":"<Frame>::is_masked","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76146,"byte_end":76155,"line_start":105,"line_end":105,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":378},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76351,"byte_end":76355,"line_start":114,"line_end":114,"column_start":12,"column_end":16},"name":"mask","qualname":"<Frame>::mask","value":"fn (&self) -> Option<&[u8; 4]>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76306,"byte_end":76325,"line_start":112,"line_end":112,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76330,"byte_end":76339,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":380},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76507,"byte_end":76516,"line_start":121,"line_end":121,"column_start":12,"column_end":21},"name":"set_final","qualname":"<Frame>::set_final","value":"fn (&mut self, is_final: bool) -> &mut Frame","parent":null,"children":[],"decl_id":null,"docs":" Make this frame a final frame.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76462,"byte_end":76481,"line_start":119,"line_end":119,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76486,"byte_end":76495,"line_start":120,"line_end":120,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":382},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76675,"byte_end":76683,"line_start":128,"line_end":128,"column_start":12,"column_end":20},"name":"set_rsv1","qualname":"<Frame>::set_rsv1","value":"fn (&mut self, has_rsv1: bool) -> &mut Frame","parent":null,"children":[],"decl_id":null,"docs":" Set the first reserved bit.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76654,"byte_end":76663,"line_start":127,"line_end":127,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":384},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76839,"byte_end":76847,"line_start":135,"line_end":135,"column_start":12,"column_end":20},"name":"set_rsv2","qualname":"<Frame>::set_rsv2","value":"fn (&mut self, has_rsv2: bool) -> &mut Frame","parent":null,"children":[],"decl_id":null,"docs":" Set the second reserved bit.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76818,"byte_end":76827,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":386},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":77002,"byte_end":77010,"line_start":142,"line_end":142,"column_start":12,"column_end":20},"name":"set_rsv3","qualname":"<Frame>::set_rsv3","value":"fn (&mut self, has_rsv3: bool) -> &mut Frame","parent":null,"children":[],"decl_id":null,"docs":" Set the third reserved bit.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":76981,"byte_end":76990,"line_start":141,"line_end":141,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":77177,"byte_end":77187,"line_start":150,"line_end":150,"column_start":12,"column_end":22},"name":"set_opcode","qualname":"<Frame>::set_opcode","value":"fn (&mut self, opcode: OpCode) -> &mut Frame","parent":null,"children":[],"decl_id":null,"docs":" Set the OpCode.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":77132,"byte_end":77151,"line_start":148,"line_end":148,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":77156,"byte_end":77165,"line_start":149,"line_end":149,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":390},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":77364,"byte_end":77375,"line_start":158,"line_end":158,"column_start":12,"column_end":23},"name":"payload_mut","qualname":"<Frame>::payload_mut","value":"fn (&mut self) -> &mut Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Edit the frame's payload.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":77319,"byte_end":77338,"line_start":156,"line_end":156,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":77343,"byte_end":77352,"line_start":157,"line_end":157,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":392},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":77751,"byte_end":77759,"line_start":169,"line_end":169,"column_start":12,"column_end":20},"name":"set_mask","qualname":"<Frame>::set_mask","value":"fn (&mut self) -> &mut Frame","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":77730,"byte_end":77739,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":78083,"byte_end":78094,"line_start":178,"line_end":178,"column_start":12,"column_end":23},"name":"remove_mask","qualname":"<Frame>::remove_mask","value":"fn (&mut self) -> &mut Frame","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":78062,"byte_end":78071,"line_start":177,"line_end":177,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":396},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":78298,"byte_end":78307,"line_start":186,"line_end":186,"column_start":12,"column_end":21},"name":"into_data","qualname":"<Frame>::into_data","value":"fn (self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Consume the frame into its payload.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":78413,"byte_end":78420,"line_start":192,"line_end":192,"column_start":12,"column_end":19},"name":"message","qualname":"<Frame>::message","value":"fn (data: Vec<u8>, code: OpCode, finished: bool) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Create a new data frame.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":78392,"byte_end":78401,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":78904,"byte_end":78908,"line_start":211,"line_end":211,"column_start":12,"column_end":16},"name":"pong","qualname":"<Frame>::pong","value":"fn (data: Vec<u8>) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Create a new Pong control frame.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":78883,"byte_end":78892,"line_start":210,"line_end":210,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":402},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":79126,"byte_end":79130,"line_start":221,"line_end":221,"column_start":12,"column_end":16},"name":"ping","qualname":"<Frame>::ping","value":"fn (data: Vec<u8>) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Create a new Ping control frame.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":79105,"byte_end":79114,"line_start":220,"line_end":220,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":79349,"byte_end":79354,"line_start":231,"line_end":231,"column_start":12,"column_end":17},"name":"close","qualname":"<Frame>::close","value":"fn (code: CloseCode, reason: &str) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Create a new Close control frame.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":79328,"byte_end":79337,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":79779,"byte_end":79784,"line_start":247,"line_end":247,"column_start":12,"column_end":17},"name":"parse","qualname":"<Frame>::parse","value":"fn (cursor: &mut Cursor<Vec<u8>>) -> Result<Option<Frame>>","parent":null,"children":[],"decl_id":null,"docs":" Parse the input stream into a frame.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":83646,"byte_end":83652,"line_start":374,"line_end":374,"column_start":12,"column_end":18},"name":"format","qualname":"<Frame>::format","value":"fn <W> (&mut self, w: &mut W) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a frame out to a buffer\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":458},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":86821,"byte_end":86828,"line_start":20,"line_end":20,"column_start":11,"column_end":18},"name":"Handler","qualname":"::handler::Handler","value":"Handler","parent":null,"children":[{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":468},{"krate":0,"index":470},{"krate":0,"index":472},{"krate":0,"index":474},{"krate":0,"index":476},{"krate":0,"index":478},{"krate":0,"index":480},{"krate":0,"index":482}],"decl_id":null,"docs":" The core trait of this library.\n Implementing this trait provides the business logic of the WebSocket application.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":460},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":86945,"byte_end":86956,"line_start":25,"line_end":25,"column_start":8,"column_end":19},"name":"on_shutdown","qualname":"::handler::Handler::on_shutdown","value":"fn (&mut self) -> ()","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Called when a request to shutdown all connections has been received.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":86928,"byte_end":86937,"line_start":24,"line_end":24,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":462},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":87202,"byte_end":87209,"line_start":33,"line_end":33,"column_start":8,"column_end":15},"name":"on_open","qualname":"::handler::Handler::on_open","value":"fn (&mut self, shake: Handshake) -> Result<()>","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Called when the WebSocket handshake is successful and the connection is open for sending\n and receiving messages.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":464},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":87439,"byte_end":87449,"line_start":41,"line_end":41,"column_start":8,"column_end":18},"name":"on_message","qualname":"::handler::Handler::on_message","value":"fn (&mut self, msg: Message) -> Result<()>","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Called on incoming messages.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":466},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":87811,"byte_end":87819,"line_start":49,"line_end":49,"column_start":8,"column_end":16},"name":"on_close","qualname":"::handler::Handler::on_close","value":"fn (&mut self, code: CloseCode, reason: &str) -> ()","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Called any time this endpoint receives a close control frame.\n This may be because the other endpoint is initiating a closing handshake,\n or it may be the other endpoint confirming the handshake initiated by this endpoint.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":468},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":88001,"byte_end":88009,"line_start":54,"line_end":54,"column_start":8,"column_end":16},"name":"on_error","qualname":"::handler::Handler::on_error","value":"fn (&mut self, err: Error) -> ()","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Called when an error occurs on the WebSocket.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":89657,"byte_end":89667,"line_start":97,"line_end":97,"column_start":8,"column_end":18},"name":"on_request","qualname":"::handler::Handler::on_request","value":"fn (&mut self, req: &Request) -> Result<Response>","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" A method for handling the low-level workings of the request portion of the WebSocket\n handshake.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":89640,"byte_end":89649,"line_start":96,"line_end":96,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":472},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":90262,"byte_end":90273,"line_start":110,"line_end":110,"column_start":8,"column_end":19},"name":"on_response","qualname":"::handler::Handler::on_response","value":"fn (&mut self, res: &Response) -> Result<()>","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" A method for handling the low-level workings of the response portion of the WebSocket\n handshake.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":90245,"byte_end":90254,"line_start":109,"line_end":109,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":474},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":91416,"byte_end":91426,"line_start":146,"line_end":146,"column_start":8,"column_end":18},"name":"on_timeout","qualname":"::handler::Handler::on_timeout","value":"fn (&mut self, event: Token) -> Result<()>","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Called when a timeout is triggered.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":91399,"byte_end":91408,"line_start":145,"line_end":145,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":93269,"byte_end":93283,"line_start":199,"line_end":199,"column_start":8,"column_end":22},"name":"on_new_timeout","qualname":"::handler::Handler::on_new_timeout","value":"fn (&mut self, _: Token, _: Timeout) -> Result<()>","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" Called when a timeout has been scheduled on the eventloop.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":93252,"byte_end":93261,"line_start":198,"line_end":198,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":94107,"byte_end":94115,"line_start":218,"line_end":218,"column_start":8,"column_end":16},"name":"on_frame","qualname":"::handler::Handler::on_frame","value":"fn (&mut self, frame: Frame) -> Result<Option<Frame>>","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" A method for handling incoming frames.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":94090,"byte_end":94099,"line_start":217,"line_end":217,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":95507,"byte_end":95520,"line_start":247,"line_end":247,"column_start":8,"column_end":21},"name":"on_send_frame","qualname":"::handler::Handler::on_send_frame","value":"fn (&mut self, frame: Frame) -> Result<Option<Frame>>","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" A method for handling outgoing frames.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":95490,"byte_end":95499,"line_start":246,"line_end":246,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":96669,"byte_end":96682,"line_start":278,"line_end":278,"column_start":8,"column_end":21},"name":"build_request","qualname":"::handler::Handler::build_request","value":"fn (&mut self, url: &url::Url) -> Result<Request>","parent":{"krate":0,"index":458},"children":[],"decl_id":null,"docs":" A method for creating the initial handshake request for WebSocket clients.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":96652,"byte_end":96661,"line_start":277,"line_end":277,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1228},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":103191,"byte_end":103200,"line_start":75,"line_end":75,"column_start":12,"column_end":21},"name":"Handshake","qualname":"::handshake::Handshake","value":"Handshake { request, response, peer_addr, local_addr }","parent":null,"children":[{"krate":0,"index":347},{"krate":0,"index":349},{"krate":0,"index":351},{"krate":0,"index":353}],"decl_id":null,"docs":" A struct representing the two halves of the WebSocket handshake.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":347},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":103265,"byte_end":103272,"line_start":77,"line_end":77,"column_start":9,"column_end":16},"name":"request","qualname":"::handshake::Handshake::request","value":"handshake::Request","parent":{"krate":0,"index":1228},"children":[],"decl_id":null,"docs":" The HTTP request sent to begin the handshake.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":349},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":103359,"byte_end":103367,"line_start":79,"line_end":79,"column_start":9,"column_end":17},"name":"response","qualname":"::handshake::Handshake::response","value":"handshake::Response","parent":{"krate":0,"index":1228},"children":[],"decl_id":null,"docs":" The HTTP response from the server confirming the handshake.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":351},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":103505,"byte_end":103514,"line_start":82,"line_end":82,"column_start":9,"column_end":18},"name":"peer_addr","qualname":"::handshake::Handshake::peer_addr","value":"std::option::Option<std::net::SocketAddr>","parent":{"krate":0,"index":1228},"children":[],"decl_id":null,"docs":" The socket address of the other endpoint. This address may\n be an intermediary such as a proxy server.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":353},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":103589,"byte_end":103599,"line_start":84,"line_end":84,"column_start":9,"column_end":19},"name":"local_addr","qualname":"::handshake::Handshake::local_addr","value":"std::option::Option<std::net::SocketAddr>","parent":{"krate":0,"index":1228},"children":[],"decl_id":null,"docs":" The socket address of this endpoint.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":104246,"byte_end":104257,"line_start":101,"line_end":101,"column_start":12,"column_end":23},"name":"remote_addr","qualname":"<Handshake>::remote_addr","value":"fn (&self) -> Result<Option<String>>","parent":null,"children":[],"decl_id":null,"docs":" Get the IP address of the remote connection.","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":104215,"byte_end":104234,"line_start":100,"line_end":100,"column_start":5,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":1234},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":104588,"byte_end":104595,"line_start":114,"line_end":114,"column_start":12,"column_end":19},"name":"Request","qualname":"::handshake::Request","value":"Request {  }","parent":null,"children":[{"krate":0,"index":355},{"krate":0,"index":357},{"krate":0,"index":359}],"decl_id":null,"docs":" The handshake request.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":104765,"byte_end":104771,"line_start":122,"line_end":122,"column_start":12,"column_end":18},"name":"header","qualname":"<Request>::header","value":"fn (&self, header: &str) -> Option<&Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Get the value of the first instance of an HTTP header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":105056,"byte_end":105066,"line_start":130,"line_end":130,"column_start":12,"column_end":22},"name":"header_mut","qualname":"<Request>::header_mut","value":"fn (&mut self, header: &str) -> Option<&mut Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Edit the value of the first instance of an HTTP header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":105385,"byte_end":105392,"line_start":140,"line_end":140,"column_start":12,"column_end":19},"name":"headers","qualname":"<Request>::headers","value":"fn (&self) -> &Vec<(String, Vec<u8>)>","parent":null,"children":[],"decl_id":null,"docs":" Access the request headers.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":105340,"byte_end":105359,"line_start":138,"line_end":138,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":105364,"byte_end":105373,"line_start":139,"line_end":139,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":105541,"byte_end":105552,"line_start":147,"line_end":147,"column_start":12,"column_end":23},"name":"headers_mut","qualname":"<Request>::headers_mut","value":"fn (&mut self) -> &mut Vec<(String, Vec<u8>)>","parent":null,"children":[],"decl_id":null,"docs":" Edit the request headers.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":105496,"byte_end":105515,"line_start":145,"line_end":145,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":105520,"byte_end":105529,"line_start":146,"line_end":146,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":105731,"byte_end":105737,"line_start":153,"line_end":153,"column_start":12,"column_end":18},"name":"origin","qualname":"<Request>::origin","value":"fn (&self) -> Result<Option<&str>>","parent":null,"children":[],"decl_id":null,"docs":" Get the origin of the request if it comes from a browser.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":105700,"byte_end":105719,"line_start":152,"line_end":152,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":105992,"byte_end":105995,"line_start":162,"line_end":162,"column_start":12,"column_end":15},"name":"key","qualname":"<Request>::key","value":"fn (&self) -> Result<&Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Get the unhashed WebSocket key sent in the request.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":106229,"byte_end":106239,"line_start":168,"line_end":168,"column_start":12,"column_end":22},"name":"hashed_key","qualname":"<Request>::hashed_key","value":"fn (&self) -> Result<String>","parent":null,"children":[],"decl_id":null,"docs":" Get the hashed WebSocket key from this request.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":106419,"byte_end":106426,"line_start":174,"line_end":174,"column_start":12,"column_end":19},"name":"version","qualname":"<Request>::version","value":"fn (&self) -> Result<&str>","parent":null,"children":[],"decl_id":null,"docs":" Get the WebSocket protocol version from the request (should be 13).\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":106388,"byte_end":106407,"line_start":173,"line_end":173,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":106804,"byte_end":106810,"line_start":187,"line_end":187,"column_start":12,"column_end":18},"name":"method","qualname":"<Request>::method","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Get the request method.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":106783,"byte_end":106792,"line_start":186,"line_end":186,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":106942,"byte_end":106950,"line_start":194,"line_end":194,"column_start":12,"column_end":20},"name":"resource","qualname":"<Request>::resource","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Get the path of the request.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":106897,"byte_end":106916,"line_start":192,"line_end":192,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":106921,"byte_end":106930,"line_start":193,"line_end":193,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":107094,"byte_end":107103,"line_start":200,"line_end":200,"column_start":12,"column_end":21},"name":"protocols","qualname":"<Request>::protocols","value":"fn (&self) -> Result<Vec<&str>>","parent":null,"children":[],"decl_id":null,"docs":" Get the possible protocols for the WebSocket connection.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":107063,"byte_end":107082,"line_start":199,"line_end":199,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":107537,"byte_end":107549,"line_start":214,"line_end":214,"column_start":12,"column_end":24},"name":"add_protocol","qualname":"<Request>::add_protocol","value":"fn (&mut self, protocol: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a possible protocol to this request.\n This may result in duplicate protocols listed.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":107506,"byte_end":107525,"line_start":213,"line_end":213,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":107958,"byte_end":107973,"line_start":226,"line_end":226,"column_start":12,"column_end":27},"name":"remove_protocol","qualname":"<Request>::remove_protocol","value":"fn (&mut self, protocol: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove a possible protocol from this request.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":107927,"byte_end":107946,"line_start":225,"line_end":225,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":108671,"byte_end":108681,"line_start":246,"line_end":246,"column_start":12,"column_end":22},"name":"extensions","qualname":"<Request>::extensions","value":"fn (&self) -> Result<Vec<&str>>","parent":null,"children":[],"decl_id":null,"docs":" Get the possible extensions for the WebSocket connection.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":108640,"byte_end":108659,"line_start":245,"line_end":245,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":109219,"byte_end":109232,"line_start":259,"line_end":259,"column_start":12,"column_end":25},"name":"add_extension","qualname":"<Request>::add_extension","value":"fn (&mut self, ext: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add a possible extension to this request.\n This may result in duplicate extensions listed. Also, the order of extensions\n indicates preference, so if the preference matters, consider using the\n `Sec-WebSocket-Protocol` header directly.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":109188,"byte_end":109207,"line_start":258,"line_end":258,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":109687,"byte_end":109703,"line_start":272,"line_end":272,"column_start":12,"column_end":28},"name":"remove_extension","qualname":"<Request>::remove_extension","value":"fn (&mut self, ext: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove a possible extension from this request.\n This will remove all configurations of the extension.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":109656,"byte_end":109675,"line_start":271,"line_end":271,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":110908,"byte_end":110919,"line_start":305,"line_end":305,"column_start":12,"column_end":23},"name":"client_addr","qualname":"<Request>::client_addr","value":"fn (&self) -> Result<Option<&str>>","parent":null,"children":[],"decl_id":null,"docs":" Get the IP address of the client.","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":110877,"byte_end":110896,"line_start":304,"line_end":304,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":111793,"byte_end":111798,"line_start":328,"line_end":328,"column_start":12,"column_end":17},"name":"parse","qualname":"<Request>::parse","value":"fn (buf: &[u8]) -> Result<Option<Request>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to parse an HTTP request from a buffer. If the buffer does not contain a complete\n request, this will return `Ok(None)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":112477,"byte_end":112485,"line_start":347,"line_end":347,"column_start":12,"column_end":20},"name":"from_url","qualname":"<Request>::from_url","value":"fn (url: &url::Url) -> Result<Request>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new WebSocket handshake HTTP request from a url.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":113886,"byte_end":113892,"line_start":389,"line_end":389,"column_start":12,"column_end":18},"name":"format","qualname":"<Request>::format","value":"fn <W> (&self, w: &mut W) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a request out to a buffer\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1240},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":114771,"byte_end":114779,"line_start":424,"line_end":424,"column_start":12,"column_end":20},"name":"Response","qualname":"::handshake::Response","value":"Response {  }","parent":null,"children":[{"krate":0,"index":365},{"krate":0,"index":367},{"krate":0,"index":369},{"krate":0,"index":371}],"decl_id":null,"docs":" The handshake response.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":115007,"byte_end":115010,"line_start":435,"line_end":435,"column_start":12,"column_end":15},"name":"new","qualname":"<Response>::new","value":"fn <R> (status: u16, reason: R, body: Vec<u8>) -> Response","parent":null,"children":[],"decl_id":null,"docs":" Construct a generic HTTP response with a body.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":115356,"byte_end":115360,"line_start":449,"line_end":449,"column_start":12,"column_end":16},"name":"body","qualname":"<Response>::body","value":"fn (&self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Get the response body.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":115335,"byte_end":115344,"line_start":448,"line_end":448,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":115765,"byte_end":115775,"line_start":461,"line_end":461,"column_start":12,"column_end":22},"name":"header_mut","qualname":"<Response>::header_mut","value":"fn (&mut self, header: &str) -> Option<&mut Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Edit the value of the first instance of an HTTP header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116094,"byte_end":116101,"line_start":471,"line_end":471,"column_start":12,"column_end":19},"name":"headers","qualname":"<Response>::headers","value":"fn (&self) -> &Vec<(String, Vec<u8>)>","parent":null,"children":[],"decl_id":null,"docs":" Access the request headers.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116049,"byte_end":116068,"line_start":469,"line_end":469,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116073,"byte_end":116082,"line_start":470,"line_end":470,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116250,"byte_end":116261,"line_start":478,"line_end":478,"column_start":12,"column_end":23},"name":"headers_mut","qualname":"<Response>::headers_mut","value":"fn (&mut self) -> &mut Vec<(String, Vec<u8>)>","parent":null,"children":[],"decl_id":null,"docs":" Edit the request headers.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116205,"byte_end":116224,"line_start":476,"line_end":476,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116229,"byte_end":116238,"line_start":477,"line_end":477,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116422,"byte_end":116428,"line_start":485,"line_end":485,"column_start":12,"column_end":18},"name":"status","qualname":"<Response>::status","value":"fn (&self) -> u16","parent":null,"children":[],"decl_id":null,"docs":" Get the HTTP status code.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116377,"byte_end":116396,"line_start":483,"line_end":483,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116401,"byte_end":116410,"line_start":484,"line_end":484,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116555,"byte_end":116565,"line_start":492,"line_end":492,"column_start":12,"column_end":22},"name":"set_status","qualname":"<Response>::set_status","value":"fn (&mut self, status: u16) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the HTTP status code.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116510,"byte_end":116529,"line_start":490,"line_end":490,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116534,"byte_end":116543,"line_start":491,"line_end":491,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116713,"byte_end":116719,"line_start":499,"line_end":499,"column_start":12,"column_end":18},"name":"reason","qualname":"<Response>::reason","value":"fn (&self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Get the HTTP status reason.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116668,"byte_end":116687,"line_start":497,"line_end":497,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116692,"byte_end":116701,"line_start":498,"line_end":498,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116850,"byte_end":116860,"line_start":506,"line_end":506,"column_start":12,"column_end":22},"name":"set_reason","qualname":"<Response>::set_reason","value":"fn <R> (&mut self, reason: R) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the HTTP status reason.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116805,"byte_end":116824,"line_start":504,"line_end":504,"column_start":5,"column_end":24}},{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":116829,"byte_end":116838,"line_start":505,"line_end":505,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":117019,"byte_end":117022,"line_start":514,"line_end":514,"column_start":12,"column_end":15},"name":"key","qualname":"<Response>::key","value":"fn (&self) -> Result<&Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Get the hashed WebSocket key.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":117288,"byte_end":117296,"line_start":521,"line_end":521,"column_start":12,"column_end":20},"name":"protocol","qualname":"<Response>::protocol","value":"fn (&self) -> Result<Option<&str>>","parent":null,"children":[],"decl_id":null,"docs":" Get the protocol that the server has decided to use.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":117257,"byte_end":117276,"line_start":520,"line_end":520,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":117590,"byte_end":117602,"line_start":531,"line_end":531,"column_start":12,"column_end":24},"name":"set_protocol","qualname":"<Response>::set_protocol","value":"fn (&mut self, protocol: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Set the protocol that the server has decided to use.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":117559,"byte_end":117578,"line_start":530,"line_end":530,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":118061,"byte_end":118071,"line_start":543,"line_end":543,"column_start":12,"column_end":22},"name":"extensions","qualname":"<Response>::extensions","value":"fn (&self) -> Result<Vec<&str>>","parent":null,"children":[],"decl_id":null,"docs":" Get the extensions that the server has decided to use. If these are unacceptable, it is\n appropriate to send an Extension close code.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":118030,"byte_end":118049,"line_start":542,"line_end":542,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":118507,"byte_end":118520,"line_start":557,"line_end":557,"column_start":12,"column_end":25},"name":"add_extension","qualname":"<Response>::add_extension","value":"fn (&mut self, ext: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Add an accepted extension to this response.\n This may result in duplicate extensions listed.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":118476,"byte_end":118495,"line_start":556,"line_end":556,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":118977,"byte_end":118993,"line_start":570,"line_end":570,"column_start":12,"column_end":28},"name":"remove_extension","qualname":"<Response>::remove_extension","value":"fn (&mut self, ext: &str) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Remove an accepted extension from this response.\n This will remove all configurations of the extension.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":118946,"byte_end":118965,"line_start":569,"line_end":569,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":119719,"byte_end":119724,"line_start":590,"line_end":590,"column_start":12,"column_end":17},"name":"parse","qualname":"<Response>::parse","value":"fn (buf: &[u8]) -> Result<Option<Response>>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to parse an HTTP response from a buffer. If the buffer does not contain a complete\n response, thiw will return `Ok(None)`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":120593,"byte_end":120605,"line_start":613,"line_end":613,"column_start":12,"column_end":24},"name":"from_request","qualname":"<Response>::from_request","value":"fn (req: &Request) -> Result<Response>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new WebSocket handshake HTTP response from a request.\n This will create a response that ignores protocols and extensions. Edit this response to\n accept a protocol and extensions as necessary.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":121151,"byte_end":121157,"line_start":630,"line_end":630,"column_start":12,"column_end":18},"name":"format","qualname":"<Response>::format","value":"fn <W> (&self, w: &mut W) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Write a response out to a buffer\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":383},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":164234,"byte_end":164238,"line_start":15,"line_end":15,"column_start":5,"column_end":9},"name":"Text","qualname":"::message::Message::Text","value":"Message::Text(String)","parent":{"krate":0,"index":1258},"children":[],"decl_id":null,"docs":" A text WebSocket message\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":387},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":164287,"byte_end":164293,"line_start":17,"line_end":17,"column_start":5,"column_end":11},"name":"Binary","qualname":"::message::Message::Binary","value":"Message::Binary(Vec<u8>)","parent":{"krate":0,"index":1258},"children":[],"decl_id":null,"docs":" A binary WebSocket message\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1258},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":164187,"byte_end":164194,"line_start":13,"line_end":13,"column_start":10,"column_end":17},"name":"Message","qualname":"::message::Message","value":"Message::{Text, Binary}","parent":null,"children":[{"krate":0,"index":383},{"krate":0,"index":387}],"decl_id":null,"docs":" An enum representing the various forms of a WebSocket message.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":164178,"byte_end":164305,"line_start":13,"line_end":18,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":164396,"byte_end":164400,"line_start":22,"line_end":22,"column_start":12,"column_end":16},"name":"text","qualname":"<Message>::text","value":"fn <S> (string: S) -> Message","parent":null,"children":[],"decl_id":null,"docs":" Create a new text WebSocket message from a stringable.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":832},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":164594,"byte_end":164600,"line_start":30,"line_end":30,"column_start":12,"column_end":18},"name":"binary","qualname":"<Message>::binary","value":"fn <B> (bin: B) -> Message","parent":null,"children":[],"decl_id":null,"docs":" Create a new binary WebSocket message by converting to Vec<u8>.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":834},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":164774,"byte_end":164781,"line_start":38,"line_end":38,"column_start":12,"column_end":19},"name":"is_text","qualname":"<Message>::is_text","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether a message is a text message.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":164967,"byte_end":164976,"line_start":46,"line_end":46,"column_start":12,"column_end":21},"name":"is_binary","qualname":"<Message>::is_binary","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Indicates whether a message is a binary message.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":165154,"byte_end":165157,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"len","qualname":"<Message>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the WebSocket message.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":840},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":165457,"byte_end":165465,"line_start":63,"line_end":63,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Message>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the WebSocket message has no content.\n For example, if the other side of the connection sent an empty string.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":165652,"byte_end":165658,"line_start":71,"line_end":71,"column_start":12,"column_end":18},"name":"opcode","qualname":"<Message>::opcode","value":"fn (&self) -> OpCode","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":165866,"byte_end":165875,"line_start":79,"line_end":79,"column_start":12,"column_end":21},"name":"into_data","qualname":"<Message>::into_data","value":"fn (self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Consume the WebSocket and return it as binary data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":166104,"byte_end":166113,"line_start":87,"line_end":87,"column_start":12,"column_end":21},"name":"into_text","qualname":"<Message>::into_text","value":"fn (self) -> Result<String>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to consume the WebSocket message and convert it to a String.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":166431,"byte_end":166438,"line_start":96,"line_end":96,"column_start":12,"column_end":19},"name":"as_text","qualname":"<Message>::as_text","value":"fn (&self) -> Result<&str>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to get a &str from the WebSocket message,\n this will try to convert binary data to utf8.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":391},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":168508,"byte_end":168516,"line_start":9,"line_end":9,"column_start":5,"column_end":13},"name":"Continue","qualname":"::protocol::OpCode::Continue","value":"OpCode::Continue","parent":{"krate":0,"index":1278},"children":[],"decl_id":null,"docs":" Indicates a continuation frame of a fragmented message.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":393},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":168559,"byte_end":168563,"line_start":11,"line_end":11,"column_start":5,"column_end":9},"name":"Text","qualname":"::protocol::OpCode::Text","value":"OpCode::Text","parent":{"krate":0,"index":1278},"children":[],"decl_id":null,"docs":" Indicates a text data frame.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":395},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":168608,"byte_end":168614,"line_start":13,"line_end":13,"column_start":5,"column_end":11},"name":"Binary","qualname":"::protocol::OpCode::Binary","value":"OpCode::Binary","parent":{"krate":0,"index":1278},"children":[],"decl_id":null,"docs":" Indicates a binary data frame.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":397},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":168661,"byte_end":168666,"line_start":15,"line_end":15,"column_start":5,"column_end":10},"name":"Close","qualname":"::protocol::OpCode::Close","value":"OpCode::Close","parent":{"krate":0,"index":1278},"children":[],"decl_id":null,"docs":" Indicates a close control frame.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":399},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":168712,"byte_end":168716,"line_start":17,"line_end":17,"column_start":5,"column_end":9},"name":"Ping","qualname":"::protocol::OpCode::Ping","value":"OpCode::Ping","parent":{"krate":0,"index":1278},"children":[],"decl_id":null,"docs":" Indicates a ping control frame.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":401},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":168762,"byte_end":168766,"line_start":19,"line_end":19,"column_start":5,"column_end":9},"name":"Pong","qualname":"::protocol::OpCode::Pong","value":"OpCode::Pong","parent":{"krate":0,"index":1278},"children":[],"decl_id":null,"docs":" Indicates a pong control frame.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":403},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":168822,"byte_end":168825,"line_start":21,"line_end":21,"column_start":5,"column_end":8},"name":"Bad","qualname":"::protocol::OpCode::Bad","value":"OpCode::Bad","parent":{"krate":0,"index":1278},"children":[],"decl_id":null,"docs":" Indicates an invalid opcode was received.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1278},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":168431,"byte_end":168437,"line_start":7,"line_end":7,"column_start":10,"column_end":16},"name":"OpCode","qualname":"::protocol::OpCode","value":"OpCode::{Continue, Text, Binary, Close, Ping, Pong, Bad}","parent":null,"children":[{"krate":0,"index":391},{"krate":0,"index":393},{"krate":0,"index":395},{"krate":0,"index":397},{"krate":0,"index":399},{"krate":0,"index":401},{"krate":0,"index":403}],"decl_id":null,"docs":" Operation codes as part of rfc6455.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":168422,"byte_end":168828,"line_start":7,"line_end":22,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":168422,"byte_end":168828,"line_start":7,"line_end":22,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":168914,"byte_end":168924,"line_start":26,"line_end":26,"column_start":12,"column_end":22},"name":"is_control","qualname":"<OpCode>::is_control","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Test whether the opcode indicates a control frame.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":405},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":170570,"byte_end":170576,"line_start":88,"line_end":88,"column_start":5,"column_end":11},"name":"Normal","qualname":"::protocol::CloseCode::Normal","value":"CloseCode::Normal","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Indicates a normal closure, meaning that the purpose for\n which the connection was established has been fulfilled.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":407},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":170718,"byte_end":170722,"line_start":91,"line_end":91,"column_start":5,"column_end":9},"name":"Away","qualname":"::protocol::CloseCode::Away","value":"CloseCode::Away","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Indicates that an endpoint is \"going away\", such as a server\n going down or a browser having navigated away from a page.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":409},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":170826,"byte_end":170834,"line_start":94,"line_end":94,"column_start":5,"column_end":13},"name":"Protocol","qualname":"::protocol::CloseCode::Protocol","value":"CloseCode::Protocol","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Indicates that an endpoint is terminating the connection due\n to a protocol error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":411},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":171084,"byte_end":171095,"line_start":99,"line_end":99,"column_start":5,"column_end":16},"name":"Unsupported","qualname":"::protocol::CloseCode::Unsupported","value":"CloseCode::Unsupported","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Indicates that an endpoint is terminating the connection\n because it has received a type of data it cannot accept (e.g., an\n endpoint that understands only text data MAY send this if it\n receives a binary message).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":413},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":171312,"byte_end":171318,"line_start":103,"line_end":103,"column_start":5,"column_end":11},"name":"Status","qualname":"::protocol::CloseCode::Status","value":"CloseCode::Status","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Indicates that no status code was included in a closing frame. This\n close code makes it possible to use a single method, `on_close` to\n handle even cases where no close code was provided.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":415},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":171660,"byte_end":171668,"line_start":109,"line_end":109,"column_start":5,"column_end":13},"name":"Abnormal","qualname":"::protocol::CloseCode::Abnormal","value":"CloseCode::Abnormal","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Indicates an abnormal closure. If the abnormal closure was due to an\n error, this close code will not be used. Instead, the `on_error` method\n of the handler will be called with the error. However, if the connection\n is simply dropped, without an error, this close code will be sent to the\n handler.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":417},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":171918,"byte_end":171925,"line_start":114,"line_end":114,"column_start":5,"column_end":12},"name":"Invalid","qualname":"::protocol::CloseCode::Invalid","value":"CloseCode::Invalid","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Indicates that an endpoint is terminating the connection\n because it has received data within a message that was not\n consistent with the type of the message (e.g., non-UTF-8 [RFC3629]\n data within a text message).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":419},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":172282,"byte_end":172288,"line_start":120,"line_end":120,"column_start":5,"column_end":11},"name":"Policy","qualname":"::protocol::CloseCode::Policy","value":"CloseCode::Policy","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Indicates that an endpoint is terminating the connection\n because it has received a message that violates its policy.  This\n is a generic status code that can be returned when there is no\n other more suitable status code (e.g., Unsupported or Size) or if there\n is a need to hide specific details about the policy.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":421},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":172444,"byte_end":172448,"line_start":124,"line_end":124,"column_start":5,"column_end":9},"name":"Size","qualname":"::protocol::CloseCode::Size","value":"CloseCode::Size","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Indicates that an endpoint is terminating the connection\n because it has received a message that is too big for it to\n process.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":423},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":172923,"byte_end":172932,"line_start":132,"line_end":132,"column_start":5,"column_end":14},"name":"Extension","qualname":"::protocol::CloseCode::Extension","value":"CloseCode::Extension","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Indicates that an endpoint (client) is terminating the\n connection because it has expected the server to negotiate one or\n more extension, but the server didn't return them in the response\n message of the WebSocket handshake.  The list of extensions that\n are needed should be given as the reason for closing.\n Note that this status code is not used by the server, because it\n can fail the WebSocket handshake instead.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":425},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":173110,"byte_end":173115,"line_start":136,"line_end":136,"column_start":5,"column_end":10},"name":"Error","qualname":"::protocol::CloseCode::Error","value":"CloseCode::Error","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Indicates that a server is terminating the connection because\n it encountered an unexpected condition that prevented it from\n fulfilling the request.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":427},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":173295,"byte_end":173302,"line_start":139,"line_end":139,"column_start":5,"column_end":12},"name":"Restart","qualname":"::protocol::CloseCode::Restart","value":"CloseCode::Restart","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Indicates that the server is restarting. A client may choose to reconnect,\n and if it does, it should use a randomized delay of 5-30 seconds between attempts.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":429},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":173523,"byte_end":173528,"line_start":143,"line_end":143,"column_start":5,"column_end":10},"name":"Again","qualname":"::protocol::CloseCode::Again","value":"CloseCode::Again","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":" Indicates that the server is overloaded and the client should either connect\n to a different IP (when multiple targets exist), or reconnect to the same IP\n when a user has performed an action.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":431},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":173553,"byte_end":173556,"line_start":145,"line_end":145,"column_start":5,"column_end":8},"name":"Tls","qualname":"::protocol::CloseCode::Tls","value":"CloseCode::Tls","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":433},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":173581,"byte_end":173586,"line_start":147,"line_end":147,"column_start":5,"column_end":10},"name":"Empty","qualname":"::protocol::CloseCode::Empty","value":"CloseCode::Empty","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":435},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":173611,"byte_end":173616,"line_start":149,"line_end":149,"column_start":5,"column_end":10},"name":"Other","qualname":"::protocol::CloseCode::Other","value":"CloseCode::Other(u16)","parent":{"krate":0,"index":1298},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1298},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":170424,"byte_end":170433,"line_start":85,"line_end":85,"column_start":10,"column_end":19},"name":"CloseCode","qualname":"::protocol::CloseCode","value":"CloseCode::{Normal, Away, Protocol, Unsupported, Status, Abnormal, Invalid, Policy, Size, Extension, Error, Restart, Again, Tls, Empty, Other}","parent":null,"children":[{"krate":0,"index":405},{"krate":0,"index":407},{"krate":0,"index":409},{"krate":0,"index":411},{"krate":0,"index":413},{"krate":0,"index":415},{"krate":0,"index":417},{"krate":0,"index":419},{"krate":0,"index":421},{"krate":0,"index":423},{"krate":0,"index":425},{"krate":0,"index":427},{"krate":0,"index":429},{"krate":0,"index":431},{"krate":0,"index":433},{"krate":0,"index":435}],"decl_id":null,"docs":" Status code used to indicate why an endpoint is closing the WebSocket connection.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":170415,"byte_end":173624,"line_start":85,"line_end":150,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":170415,"byte_end":173624,"line_start":85,"line_end":150,"column_start":1,"column_end":2}}]},{"kind":"Type","id":{"krate":0,"index":942},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":175955,"byte_end":175961,"line_start":20,"line_end":20,"column_start":10,"column_end":16},"name":"Result","qualname":"::result::Result","value":"StdResult<T, Error>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":439},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":176355,"byte_end":176363,"line_start":28,"line_end":28,"column_start":5,"column_end":13},"name":"Internal","qualname":"::result::Kind::Internal","value":"Kind::Internal","parent":{"krate":0,"index":1320},"children":[],"decl_id":null,"docs":" Indicates an internal application error.\n If panic_on_internal is true, which is the default, then the application will panic.\n Otherwise the WebSocket will automatically attempt to send an Error (1011) close code.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":441},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":176619,"byte_end":176627,"line_start":33,"line_end":33,"column_start":5,"column_end":13},"name":"Capacity","qualname":"::result::Kind::Capacity","value":"Kind::Capacity","parent":{"krate":0,"index":1320},"children":[],"decl_id":null,"docs":" Indicates a state where some size limit has been exceeded, such as an inability to accept\n any more new connections.\n If a Connection is active, the WebSocket will automatically attempt to send\n a Size (1009) close code.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":443},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":176869,"byte_end":176877,"line_start":37,"line_end":37,"column_start":5,"column_end":13},"name":"Protocol","qualname":"::result::Kind::Protocol","value":"Kind::Protocol","parent":{"krate":0,"index":1320},"children":[],"decl_id":null,"docs":" Indicates a violation of the WebSocket protocol.\n The WebSocket will automatically attempt to send a Protocol (1002) close code, or if\n this error occurs during a handshake, an HTTP 400 response will be generated.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":445},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":177088,"byte_end":177096,"line_start":41,"line_end":41,"column_start":5,"column_end":13},"name":"Encoding","qualname":"::result::Kind::Encoding","value":"Kind::Encoding(Utf8Error)","parent":{"krate":0,"index":1320},"children":[],"decl_id":null,"docs":" Indicates that the WebSocket received data that should be utf8 encoded but was not.\n The WebSocket will automatically attempt to send a Invalid Frame Payload Data (1007) close\n code.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":449},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":177235,"byte_end":177237,"line_start":44,"line_end":44,"column_start":5,"column_end":7},"name":"Io","qualname":"::result::Kind::Io","value":"Kind::Io(io::Error)","parent":{"krate":0,"index":1320},"children":[],"decl_id":null,"docs":" Indicates an underlying IO Error.\n This kind of error will result in a WebSocket Connection disconnecting.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":453},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":177434,"byte_end":177438,"line_start":48,"line_end":48,"column_start":5,"column_end":9},"name":"Http","qualname":"::result::Kind::Http","value":"Kind::Http(httparse::Error)","parent":{"krate":0,"index":1320},"children":[],"decl_id":null,"docs":" Indicates a failure to parse an HTTP message.\n This kind of error should only occur during a WebSocket Handshake, and a HTTP 500 response\n will be generated.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":457},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":177882,"byte_end":177887,"line_start":54,"line_end":54,"column_start":5,"column_end":10},"name":"Queue","qualname":"::result::Kind::Queue","value":"Kind::Queue(mio::channel::SendError<Command>)","parent":{"krate":0,"index":1320},"children":[],"decl_id":null,"docs":" Indicates a failure to send a signal on the internal EventLoop channel. This means that\n the WebSocket is overloaded. In order to avoid this error, it is important to set\n `Settings::max_connections` and `Settings:queue_size` high enough to handle the load.\n If encountered, retuning from a handler method and waiting for the EventLoop to consume\n the queue may relieve the situation.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":461},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":178453,"byte_end":178459,"line_start":64,"line_end":64,"column_start":5,"column_end":11},"name":"Custom","qualname":"::result::Kind::Custom","value":"Kind::Custom(Box<StdError + Send + Sync>)","parent":{"krate":0,"index":1320},"children":[],"decl_id":null,"docs":" A custom error kind for use by applications. This error kind involves extra overhead\n because it will allocate the memory on the heap. The WebSocket ignores such errors by\n default, simply passing them to the Connection Handler.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1320},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":176107,"byte_end":176111,"line_start":24,"line_end":24,"column_start":10,"column_end":14},"name":"Kind","qualname":"::result::Kind","value":"Kind::{Internal, Capacity, Protocol, Encoding, Io, Http, Queue, Custom}","parent":null,"children":[{"krate":0,"index":439},{"krate":0,"index":441},{"krate":0,"index":443},{"krate":0,"index":445},{"krate":0,"index":449},{"krate":0,"index":453},{"krate":0,"index":457},{"krate":0,"index":461}],"decl_id":null,"docs":" The type of an error, which may indicate other kinds of errors as the underlying cause.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":944},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":178603,"byte_end":178608,"line_start":68,"line_end":68,"column_start":12,"column_end":17},"name":"Error","qualname":"::result::Error","value":"Error { kind, details }","parent":null,"children":[{"krate":0,"index":203},{"krate":0,"index":205}],"decl_id":null,"docs":" A struct indicating the kind of error that has occurred and any precise details of that error.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":203},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":178619,"byte_end":178623,"line_start":69,"line_end":69,"column_start":9,"column_end":13},"name":"kind","qualname":"::result::Error::kind","value":"result::Kind","parent":{"krate":0,"index":944},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":205},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":178639,"byte_end":178646,"line_start":70,"line_end":70,"column_start":9,"column_end":16},"name":"details","qualname":"::result::Error::details","value":"std::borrow::Cow<'static, str>","parent":{"krate":0,"index":944},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":178694,"byte_end":178697,"line_start":74,"line_end":74,"column_start":12,"column_end":15},"name":"new","qualname":"<Error>::new","value":"fn <I> (kind: Kind, details: I) -> Error","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":950},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":178885,"byte_end":178893,"line_start":84,"line_end":84,"column_start":12,"column_end":20},"name":"into_box","qualname":"<Error>::into_box","value":"fn (self) -> Box<StdError>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1052},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,117,116,105,108,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"util","qualname":"::util","value":"/Users/collierl/.cargo/registry/src/github.com-1ecc6299db9ec823/ws-0.7.9/src/util.rs","parent":null,"children":[{"krate":0,"index":1054},{"krate":0,"index":1056}],"decl_id":null,"docs":" The util module rexports some tools from mio in order to facilitate handling timeouts.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1104},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1549,"byte_end":1555,"line_start":76,"line_end":76,"column_start":8,"column_end":14},"name":"listen","qualname":"::listen","value":"fn <A, F, H> (addr: A, factory: F) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" A utility function for setting up a WebSocket server.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1106},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2397,"byte_end":2404,"line_start":110,"line_end":110,"column_start":8,"column_end":15},"name":"connect","qualname":"::connect","value":"fn <U, F, H> (url: U, factory: F) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" A utility function for setting up a WebSocket client.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1326},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2896,"byte_end":2904,"line_start":130,"line_end":130,"column_start":12,"column_end":20},"name":"Settings","qualname":"::Settings","value":"Settings { max_connections, queue_size, panic_on_new_connection, panic_on_shutdown, fragments_capacity, fragments_grow, fragment_size, in_buffer_capacity, in_buffer_grow, out_buffer_capacity, out_buffer_grow, panic_on_internal, panic_on_capacity, panic_on_protocol, panic_on_encoding, panic_on_queue, panic_on_io, panic_on_timeout, shutdown_on_interrupt, masking_strict, key_strict, method_strict, encrypt_server, tcp_nodelay }","parent":null,"children":[{"krate":0,"index":465},{"krate":0,"index":467},{"krate":0,"index":469},{"krate":0,"index":471},{"krate":0,"index":473},{"krate":0,"index":475},{"krate":0,"index":477},{"krate":0,"index":479},{"krate":0,"index":481},{"krate":0,"index":483},{"krate":0,"index":485},{"krate":0,"index":487},{"krate":0,"index":489},{"krate":0,"index":491},{"krate":0,"index":493},{"krate":0,"index":495},{"krate":0,"index":497},{"krate":0,"index":499},{"krate":0,"index":501},{"krate":0,"index":503},{"krate":0,"index":505},{"krate":0,"index":507},{"krate":0,"index":509},{"krate":0,"index":511}],"decl_id":null,"docs":" WebSocket settings\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2885,"byte_end":8580,"line_start":130,"line_end":236,"column_start":1,"column_end":2}}]},{"kind":"Field","id":{"krate":0,"index":465},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3237,"byte_end":3252,"line_start":136,"line_end":136,"column_start":9,"column_end":24},"name":"max_connections","qualname":"::Settings::max_connections","value":"usize","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" The maximum number of connections that this WebSocket will support.\n The default setting is low and should be increased when expecting more\n connections because this is a hard limit and no new connections beyond\n this limit can be made until an old connection is dropped.\n Default: 100\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":467},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3816,"byte_end":3826,"line_start":144,"line_end":144,"column_start":9,"column_end":19},"name":"queue_size","qualname":"::Settings::queue_size","value":"usize","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" The number of events anticipated per connection. The event loop queue size will\n be `queue_size` * `max_connections`. In order to avoid an overflow error,\n `queue_size` * `max_connections` must be less than or equal to `usize::max_value()`.\n The queue is shared between connections, which means that a connection may schedule\n more events than `queue_size` provided that another connection is using less than\n `queue_size`. However, if the queue is maxed out a Queue error will occur.\n Default: 5\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":469},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3938,"byte_end":3961,"line_start":147,"line_end":147,"column_start":9,"column_end":32},"name":"panic_on_new_connection","qualname":"::Settings::panic_on_new_connection","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Whether to panic when unable to establish a new TCP connection.\n Default: false\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":471},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4072,"byte_end":4089,"line_start":150,"line_end":150,"column_start":9,"column_end":26},"name":"panic_on_shutdown","qualname":"::Settings::panic_on_shutdown","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Whether to panic when a shutdown of the WebSocket is requested.\n Default: false\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":473},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4213,"byte_end":4231,"line_start":153,"line_end":153,"column_start":9,"column_end":27},"name":"fragments_capacity","qualname":"::Settings::fragments_capacity","value":"usize","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" The maximum number of fragments the connection can handle without reallocating.\n Default: 10\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":475},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4408,"byte_end":4422,"line_start":157,"line_end":157,"column_start":9,"column_end":23},"name":"fragments_grow","qualname":"::Settings::fragments_grow","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Whether to reallocate when `fragments_capacity` is reached. If this is false,\n a Capacity error will be triggered instead.\n Default: true\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":477},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4555,"byte_end":4568,"line_start":160,"line_end":160,"column_start":9,"column_end":22},"name":"fragment_size","qualname":"::Settings::fragment_size","value":"usize","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" The maximum length of outgoing frames. Messages longer than this will be fragmented.\n Default: 65,535\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":479},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4729,"byte_end":4747,"line_start":164,"line_end":164,"column_start":9,"column_end":27},"name":"in_buffer_capacity","qualname":"::Settings::in_buffer_capacity","value":"usize","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" The size of the incoming buffer. A larger buffer uses more memory but will allow for fewer\n reallocations.\n Default: 2048\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":481},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4944,"byte_end":4958,"line_start":168,"line_end":168,"column_start":9,"column_end":23},"name":"in_buffer_grow","qualname":"::Settings::in_buffer_grow","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Whether to reallocate the incoming buffer when `in_buffer_capacity` is reached. If this is\n false, a Capacity error will be triggered instead.\n Default: true\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":483},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5118,"byte_end":5137,"line_start":172,"line_end":172,"column_start":9,"column_end":28},"name":"out_buffer_capacity","qualname":"::Settings::out_buffer_capacity","value":"usize","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" The size of the outgoing buffer. A larger buffer uses more memory but will allow for fewer\n reallocations.\n Default: 2048\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":485},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5335,"byte_end":5350,"line_start":176,"line_end":176,"column_start":9,"column_end":24},"name":"out_buffer_grow","qualname":"::Settings::out_buffer_grow","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Whether to reallocate the incoming buffer when `out_buffer_capacity` is reached. If this is\n false, a Capacity error will be triggered instead.\n Default: true\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":487},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5634,"byte_end":5651,"line_start":181,"line_end":181,"column_start":9,"column_end":26},"name":"panic_on_internal","qualname":"::Settings::panic_on_internal","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Whether to panic when an Internal error is encountered. Internal errors should generally\n not occur, so this setting defaults to true as a debug measure, whereas production\n applications should consider setting it to false.\n Default: true\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":489},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5753,"byte_end":5770,"line_start":184,"line_end":184,"column_start":9,"column_end":26},"name":"panic_on_capacity","qualname":"::Settings::panic_on_capacity","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Whether to panic when a Capacity error is encountered.\n Default: false\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":491},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5872,"byte_end":5889,"line_start":187,"line_end":187,"column_start":9,"column_end":26},"name":"panic_on_protocol","qualname":"::Settings::panic_on_protocol","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Whether to panic when a Protocol error is encountered.\n Default: false\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":493},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5992,"byte_end":6009,"line_start":190,"line_end":190,"column_start":9,"column_end":26},"name":"panic_on_encoding","qualname":"::Settings::panic_on_encoding","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Whether to panic when an Encoding error is encountered.\n Default: false\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":495},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6108,"byte_end":6122,"line_start":193,"line_end":193,"column_start":9,"column_end":23},"name":"panic_on_queue","qualname":"::Settings::panic_on_queue","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Whether to panic when a Queue error is encountered.\n Default: false\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":497},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6219,"byte_end":6230,"line_start":196,"line_end":196,"column_start":9,"column_end":20},"name":"panic_on_io","qualname":"::Settings::panic_on_io","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Whether to panic when an Io error is encountered.\n Default: false\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":499},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6329,"byte_end":6345,"line_start":199,"line_end":199,"column_start":9,"column_end":25},"name":"panic_on_timeout","qualname":"::Settings::panic_on_timeout","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Whether to panic when a Timer error is encountered.\n Default: false\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":501},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6456,"byte_end":6477,"line_start":202,"line_end":202,"column_start":9,"column_end":30},"name":"shutdown_on_interrupt","qualname":"::Settings::shutdown_on_interrupt","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Whether to shutdown the eventloop when an interrupt is received.\n Default: true\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":503},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6798,"byte_end":6812,"line_start":207,"line_end":207,"column_start":9,"column_end":23},"name":"masking_strict","qualname":"::Settings::masking_strict","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" The WebSocket protocol requires frames sent from client endpoints to be masked as a\n security and sanity precaution. Enforcing this requirement, which may be removed at some\n point may cause incompatibilities. If you need the extra security, set this to true.\n Default: false\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":505},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7324,"byte_end":7334,"line_start":214,"line_end":214,"column_start":9,"column_end":19},"name":"key_strict","qualname":"::Settings::key_strict","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" The WebSocket protocol requires clients to verify the key returned by a server to ensure\n that the server and all intermediaries can perform the protocol. Verifying the key will\n consume processing time and other resources with the benefit that we can fail the\n connection early. The default in WS-RS is to accept any key from the server and instead\n fail late if a protocol error occurs. Change this setting to enable key verification.\n Default: false\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":507},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7738,"byte_end":7751,"line_start":220,"line_end":220,"column_start":9,"column_end":22},"name":"method_strict","qualname":"::Settings::method_strict","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" The WebSocket protocol requires clients to perform an opening handshake using the HTTP\n GET method for the request. However, since only WebSockets are supported on the connection,\n verifying the method of handshake requests is not always necessary. To enforce the\n requirement that handshakes begin with a GET method, set this to true.\n Default: false\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":509},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8294,"byte_end":8308,"line_start":229,"line_end":229,"column_start":9,"column_end":23},"name":"encrypt_server","qualname":"::Settings::encrypt_server","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Indicate whether server connections should use ssl encryption when accepting connections.\n Setting this to true means that clients should use the `wss` scheme to connect to this\n server. Note that using this flag will in general necessitate overriding the\n `Handler::upgrade_ssl_server` method in order to provide the details of the ssl context. It may be\n simpler for most users to use a reverse proxy such as nginx to provide server side\n encryption.","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":511},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8560,"byte_end":8571,"line_start":235,"line_end":235,"column_start":9,"column_end":20},"name":"tcp_nodelay","qualname":"::Settings::tcp_nodelay","value":"bool","parent":{"krate":0,"index":1326},"children":[],"decl_id":null,"docs":" Disables Nagle's algorithm.\n Usually tcp socket tries to accumulate packets to send them all together (every 200ms).\n When enabled socket will try to send packet as fast as possible.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1112},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9660,"byte_end":9669,"line_start":270,"line_end":270,"column_start":12,"column_end":21},"name":"WebSocket","qualname":"::WebSocket","value":"WebSocket {  }","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":243}],"decl_id":null,"docs":" The WebSocket struct. A WebSocket can support multiple incoming and outgoing connections.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1116},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9876,"byte_end":9879,"line_start":283,"line_end":283,"column_start":12,"column_end":15},"name":"new","qualname":"<WebSocket<F>>::new","value":"fn (factory: F) -> Result<WebSocket<F>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new WebSocket using the given Factory to create handlers.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10316,"byte_end":10320,"line_start":292,"line_end":292,"column_start":12,"column_end":16},"name":"bind","qualname":"<WebSocket<F>>::bind","value":"fn <A> (mut self, addr_spec: A) -> Result<WebSocket<F>>","parent":null,"children":[],"decl_id":null,"docs":" Consume the WebSocket and bind to the specified address.\n If the `addr_spec` yields multiple addresses this will return after the\n first successful bind. `local_addr` can be called to determine which\n address it ended up binding to.\n After the server is successfully bound you should start it using `run`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11173,"byte_end":11179,"line_start":317,"line_end":317,"column_start":12,"column_end":18},"name":"listen","qualname":"<WebSocket<F>>::listen","value":"fn <A> (self, addr_spec: A) -> Result<WebSocket<F>>","parent":null,"children":[],"decl_id":null,"docs":" Consume the WebSocket and listen for new connections on the specified address.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11528,"byte_end":11535,"line_start":326,"line_end":326,"column_start":12,"column_end":19},"name":"connect","qualname":"<WebSocket<F>>::connect","value":"fn (&mut self, url: url::Url) -> Result<&mut WebSocket<F>>","parent":null,"children":[],"decl_id":null,"docs":" Queue an outgoing connection on this WebSocket. This method may be called multiple times,\n but the actual connections will not be established until `run` is called.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11888,"byte_end":11891,"line_start":335,"line_end":335,"column_start":12,"column_end":15},"name":"run","qualname":"<WebSocket<F>>::run","value":"fn (mut self) -> Result<WebSocket<F>>","parent":null,"children":[],"decl_id":null,"docs":" Run the WebSocket. This will run the encapsulated event loop blocking the calling thread until\n the WebSocket is shutdown.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1126},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12295,"byte_end":12306,"line_start":345,"line_end":345,"column_start":12,"column_end":23},"name":"broadcaster","qualname":"<WebSocket<F>>::broadcaster","value":"fn (&self) -> Sender","parent":null,"children":[],"decl_id":null,"docs":" Get a Sender that can be used to send messages on all connections.\n Calling `send` on this Sender is equivalent to calling `broadcast`.\n Calling `shutdown` on this Sender will shutdown the WebSocket even if no connections have\n been established.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12274,"byte_end":12283,"line_start":344,"line_end":344,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12582,"byte_end":12592,"line_start":352,"line_end":352,"column_start":12,"column_end":22},"name":"local_addr","qualname":"<WebSocket<F>>::local_addr","value":"fn (&self) -> ::std::io::Result<SocketAddr>","parent":null,"children":[],"decl_id":null,"docs":" Get the local socket address this socket is bound to. Will return an error\n if the backend returns an error. Will return a `NotFound` error if\n this WebSocket is not a listening socket.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1338},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12792,"byte_end":12799,"line_start":359,"line_end":359,"column_start":12,"column_end":19},"name":"Builder","qualname":"::Builder","value":"Builder {  }","parent":null,"children":[{"krate":0,"index":513}],"decl_id":null,"docs":" Utility for constructing a WebSocket from various settings.\n","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12781,"byte_end":12827,"line_start":359,"line_end":361,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":1132},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12957,"byte_end":12960,"line_start":366,"line_end":366,"column_start":12,"column_end":15},"name":"new","qualname":"<Builder>::new","value":"fn () -> Builder","parent":null,"children":[],"decl_id":null,"docs":" Create a new Builder with default settings.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1134},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13159,"byte_end":13164,"line_start":372,"line_end":372,"column_start":12,"column_end":17},"name":"build","qualname":"<Builder>::build","value":"fn <F> (&self, factory: F) -> Result<WebSocket<F>>","parent":null,"children":[],"decl_id":null,"docs":" Build a WebSocket using this builder and a factory.\n It is possible to use the same builder to create multiple WebSockets.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1136},"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13437,"byte_end":13450,"line_start":383,"line_end":383,"column_start":12,"column_end":25},"name":"with_settings","qualname":"<Builder>::with_settings","value":"fn (&mut self, settings: Settings) -> &mut Builder","parent":null,"children":[],"decl_id":null,"docs":" Set the WebSocket settings to use.\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14160,"byte_end":14167,"line_start":35,"line_end":35,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14643,"byte_end":14649,"line_start":58,"line_end":58,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14906,"byte_end":14912,"line_start":66,"line_end":66,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":15051,"byte_end":15057,"line_start":72,"line_end":72,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":84},{"krate":0,"index":86},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,110,110,101,99,116,105,111,110,46,114,115],"byte_start":21513,"byte_end":21518,"line_start":51,"line_end":51,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,110,110,101,99,116,105,111,110,46,114,115],"byte_start":22393,"byte_end":22403,"line_start":101,"line_end":101,"column_start":9,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204},{"krate":0,"index":206},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234},{"krate":0,"index":236},{"krate":0,"index":238},{"krate":0,"index":240},{"krate":0,"index":242},{"krate":0,"index":244},{"krate":0,"index":246},{"krate":0,"index":248}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":71900,"byte_end":71901,"line_start":104,"line_end":104,"column_start":24,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":72434,"byte_end":72435,"line_start":130,"line_end":130,"column_start":22,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":308},{"krate":0,"index":310}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":74473,"byte_end":74478,"line_start":33,"line_end":33,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":358},{"krate":0,"index":360},{"krate":0,"index":362},{"krate":0,"index":364},{"krate":0,"index":366},{"krate":0,"index":368},{"krate":0,"index":370},{"krate":0,"index":372},{"krate":0,"index":374},{"krate":0,"index":376},{"krate":0,"index":378},{"krate":0,"index":380},{"krate":0,"index":382},{"krate":0,"index":384},{"krate":0,"index":386},{"krate":0,"index":388},{"krate":0,"index":390},{"krate":0,"index":392},{"krate":0,"index":394},{"krate":0,"index":396},{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":402},{"krate":0,"index":404},{"krate":0,"index":406},{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":84997,"byte_end":85002,"line_start":431,"line_end":431,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":412}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":85285,"byte_end":85290,"line_start":445,"line_end":445,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":98925,"byte_end":98926,"line_start":340,"line_end":340,"column_start":21,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":99377,"byte_end":99378,"line_start":362,"line_end":362,"column_start":22,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":514},{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":103629,"byte_end":103638,"line_start":87,"line_end":87,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":558}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":104681,"byte_end":104688,"line_start":120,"line_end":120,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":562},{"krate":0,"index":564},{"krate":0,"index":566},{"krate":0,"index":568},{"krate":0,"index":570},{"krate":0,"index":572},{"krate":0,"index":574},{"krate":0,"index":576},{"krate":0,"index":578},{"krate":0,"index":580},{"krate":0,"index":582},{"krate":0,"index":584},{"krate":0,"index":586},{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":592},{"krate":0,"index":594},{"krate":0,"index":596},{"krate":0,"index":598},{"krate":0,"index":600}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":114263,"byte_end":114270,"line_start":404,"line_end":404,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":114883,"byte_end":114891,"line_start":431,"line_end":431,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":610},{"krate":0,"index":612},{"krate":0,"index":614},{"krate":0,"index":616},{"krate":0,"index":618},{"krate":0,"index":620},{"krate":0,"index":622},{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":628},{"krate":0,"index":630},{"krate":0,"index":632},{"krate":0,"index":634},{"krate":0,"index":636},{"krate":0,"index":638},{"krate":0,"index":640},{"krate":0,"index":642},{"krate":0,"index":644}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":121564,"byte_end":121572,"line_start":646,"line_end":646,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":648}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,105,111,46,114,115],"byte_start":126182,"byte_end":126187,"line_start":66,"line_end":66,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":754}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,105,111,46,114,115],"byte_start":126786,"byte_end":126793,"line_start":96,"line_end":96,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":760},{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":772},{"krate":0,"index":774},{"krate":0,"index":776},{"krate":0,"index":778},{"krate":0,"index":780},{"krate":0,"index":782},{"krate":0,"index":784},{"krate":0,"index":786},{"krate":0,"index":788},{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":164312,"byte_end":164319,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":830},{"krate":0,"index":832},{"krate":0,"index":834},{"krate":0,"index":836},{"krate":0,"index":838},{"krate":0,"index":840},{"krate":0,"index":842},{"krate":0,"index":844},{"krate":0,"index":846},{"krate":0,"index":848}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":166625,"byte_end":166632,"line_start":104,"line_end":104,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":852}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":166742,"byte_end":166749,"line_start":110,"line_end":110,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":166861,"byte_end":166868,"line_start":116,"line_end":116,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":860}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":166974,"byte_end":166981,"line_start":122,"line_end":122,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":864}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":167085,"byte_end":167092,"line_start":128,"line_end":128,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":868}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":168835,"byte_end":168841,"line_start":24,"line_end":24,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":888}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":169075,"byte_end":169081,"line_start":34,"line_end":34,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":892}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":169487,"byte_end":169493,"line_start":48,"line_end":48,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":896}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":170009,"byte_end":170015,"line_start":68,"line_end":68,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":900}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":173645,"byte_end":173654,"line_start":152,"line_end":152,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":906}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":174197,"byte_end":174206,"line_start":175,"line_end":175,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":910}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":178675,"byte_end":178680,"line_start":73,"line_end":73,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":948},{"krate":0,"index":950}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":179055,"byte_end":179060,"line_start":92,"line_end":92,"column_start":21,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":954}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":179338,"byte_end":179343,"line_start":102,"line_end":102,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":958}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":179609,"byte_end":179614,"line_start":112,"line_end":112,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":962},{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":180916,"byte_end":180921,"line_start":144,"line_end":144,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":968}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":181041,"byte_end":181046,"line_start":150,"line_end":150,"column_start":32,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":972}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":181825,"byte_end":181830,"line_start":168,"line_end":168,"column_start":49,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":976}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":182076,"byte_end":182081,"line_start":177,"line_end":177,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":980}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":182562,"byte_end":182567,"line_start":197,"line_end":197,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":984}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,115,116,114,101,97,109,46,114,115],"byte_start":184576,"byte_end":184577,"line_start":68,"line_end":68,"column_start":34,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,115,116,114,101,97,109,46,114,115],"byte_start":184616,"byte_end":184617,"line_start":69,"line_end":69,"column_start":36,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,115,116,114,101,97,109,46,114,115],"byte_start":184765,"byte_end":184771,"line_start":78,"line_end":78,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1030},{"krate":0,"index":1032},{"krate":0,"index":1034},{"krate":0,"index":1036},{"krate":0,"index":1038},{"krate":0,"index":1040}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,115,116,114,101,97,109,46,114,115],"byte_start":186805,"byte_end":186811,"line_start":148,"line_end":148,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1044}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,115,116,114,101,97,109,46,114,115],"byte_start":190019,"byte_end":190025,"line_start":216,"line_end":216,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1048},{"krate":0,"index":1050}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8599,"byte_end":8607,"line_start":238,"line_end":238,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1110}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9753,"byte_end":9762,"line_start":278,"line_end":278,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1116},{"krate":0,"index":1118},{"krate":0,"index":1120},{"krate":0,"index":1122},{"krate":0,"index":1124},{"krate":0,"index":1126},{"krate":0,"index":1128}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12884,"byte_end":12891,"line_start":364,"line_end":364,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1132},{"krate":0,"index":1134},{"krate":0,"index":1136}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":730,"byte_end":734,"line_start":37,"line_end":37,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1052}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14160,"byte_end":14167,"line_start":35,"line_end":35,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":1148},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14643,"byte_end":14649,"line_start":58,"line_end":58,"column_start":21,"column_end":27},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":1158},"to":{"krate":2,"index":8064}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":14906,"byte_end":14912,"line_start":66,"line_end":66,"column_start":20,"column_end":26},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":1158},"to":{"krate":2,"index":2362}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,109,109,117,110,105,99,97,116,105,111,110,46,114,115],"byte_start":15051,"byte_end":15057,"line_start":72,"line_end":72,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":1158},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,110,110,101,99,116,105,111,110,46,114,115],"byte_start":21513,"byte_end":21518,"line_start":51,"line_end":51,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":1164},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,99,111,110,110,101,99,116,105,111,110,46,114,115],"byte_start":22393,"byte_end":22403,"line_start":101,"line_end":101,"column_start":9,"column_end":19},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":186},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":71900,"byte_end":71901,"line_start":104,"line_end":104,"column_start":24,"column_end":25},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":71},"to":{"krate":0,"index":256}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,97,99,116,111,114,121,46,114,115],"byte_start":72434,"byte_end":72435,"line_start":130,"line_end":130,"column_start":22,"column_end":23},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":1190},"to":{"krate":0,"index":458}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":74473,"byte_end":74478,"line_start":33,"line_end":33,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":1204},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":84997,"byte_end":85002,"line_start":431,"line_end":431,"column_start":18,"column_end":23},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":1204},"to":{"krate":2,"index":2584}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,102,114,97,109,101,46,114,115],"byte_start":85285,"byte_end":85290,"line_start":445,"line_end":445,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":1204},"to":{"krate":2,"index":8068}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":98925,"byte_end":98926,"line_start":340,"line_end":340,"column_start":21,"column_end":22},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":87},"to":{"krate":0,"index":458}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,108,101,114,46,114,115],"byte_start":99377,"byte_end":99378,"line_start":362,"line_end":362,"column_start":22,"column_end":23},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":1214},"to":{"krate":0,"index":458}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":103629,"byte_end":103638,"line_start":87,"line_end":87,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":1228},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":104681,"byte_end":104688,"line_start":120,"line_end":120,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":1234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":114263,"byte_end":114270,"line_start":404,"line_end":404,"column_start":23,"column_end":30},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":1234},"to":{"krate":2,"index":8068}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":114883,"byte_end":114891,"line_start":431,"line_end":431,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":1240},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,104,97,110,100,115,104,97,107,101,46,114,115],"byte_start":121564,"byte_end":121572,"line_start":646,"line_end":646,"column_start":23,"column_end":31},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":1240},"to":{"krate":2,"index":8068}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,105,111,46,114,115],"byte_start":126182,"byte_end":126187,"line_start":66,"line_end":66,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":750},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,105,111,46,114,115],"byte_start":126786,"byte_end":126793,"line_start":96,"line_end":96,"column_start":9,"column_end":16},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":756},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":164312,"byte_end":164319,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":1258},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":166625,"byte_end":166632,"line_start":104,"line_end":104,"column_start":23,"column_end":30},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":1258},"to":{"krate":2,"index":2606}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":166742,"byte_end":166749,"line_start":110,"line_end":110,"column_start":28,"column_end":35},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":1258},"to":{"krate":2,"index":2606}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":166861,"byte_end":166868,"line_start":116,"line_end":116,"column_start":29,"column_end":36},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":1258},"to":{"krate":2,"index":2606}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":166974,"byte_end":166981,"line_start":122,"line_end":122,"column_start":24,"column_end":31},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":1258},"to":{"krate":2,"index":2606}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,109,101,115,115,97,103,101,46,114,115],"byte_start":167085,"byte_end":167092,"line_start":128,"line_end":128,"column_start":23,"column_end":30},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":1258},"to":{"krate":2,"index":8068}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":168835,"byte_end":168841,"line_start":24,"line_end":24,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[26]},"from":{"krate":0,"index":1278},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":169075,"byte_end":169081,"line_start":34,"line_end":34,"column_start":23,"column_end":29},"kind":{"variant":"Impl","fields":[27]},"from":{"krate":0,"index":1278},"to":{"krate":2,"index":8068}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":169487,"byte_end":169493,"line_start":48,"line_end":48,"column_start":19,"column_end":25},"kind":{"variant":"Impl","fields":[28]},"from":{"krate":0,"index":1278},"to":{"krate":2,"index":2602}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":170009,"byte_end":170015,"line_start":68,"line_end":68,"column_start":19,"column_end":25},"kind":{"variant":"Impl","fields":[29]},"from":{"krate":0,"index":1278},"to":{"krate":2,"index":2606}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":173645,"byte_end":173654,"line_start":152,"line_end":152,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[30]},"from":{"krate":0,"index":1298},"to":{"krate":2,"index":2602}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,112,114,111,116,111,99,111,108,46,114,115],"byte_start":174197,"byte_end":174206,"line_start":175,"line_end":175,"column_start":20,"column_end":29},"kind":{"variant":"Impl","fields":[31]},"from":{"krate":0,"index":1298},"to":{"krate":2,"index":2606}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":178675,"byte_end":178680,"line_start":73,"line_end":73,"column_start":6,"column_end":11},"kind":{"variant":"Impl","fields":[32]},"from":{"krate":0,"index":944},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":179055,"byte_end":179060,"line_start":92,"line_end":92,"column_start":21,"column_end":26},"kind":{"variant":"Impl","fields":[33]},"from":{"krate":0,"index":944},"to":{"krate":2,"index":8064}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":179338,"byte_end":179343,"line_start":102,"line_end":102,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[34]},"from":{"krate":0,"index":944},"to":{"krate":2,"index":8068}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":179609,"byte_end":179614,"line_start":112,"line_end":112,"column_start":19,"column_end":24},"kind":{"variant":"Impl","fields":[35]},"from":{"krate":0,"index":944},"to":{"krate":1,"index":2452}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":180916,"byte_end":180921,"line_start":144,"line_end":144,"column_start":26,"column_end":31},"kind":{"variant":"Impl","fields":[36]},"from":{"krate":0,"index":944},"to":{"krate":2,"index":2606}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":181041,"byte_end":181046,"line_start":150,"line_end":150,"column_start":32,"column_end":37},"kind":{"variant":"Impl","fields":[37]},"from":{"krate":0,"index":944},"to":{"krate":2,"index":2606}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":181825,"byte_end":181830,"line_start":168,"line_end":168,"column_start":49,"column_end":54},"kind":{"variant":"Impl","fields":[38]},"from":{"krate":0,"index":944},"to":{"krate":2,"index":2606}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":182076,"byte_end":182081,"line_start":177,"line_end":177,"column_start":26,"column_end":31},"kind":{"variant":"Impl","fields":[39]},"from":{"krate":0,"index":944},"to":{"krate":2,"index":2606}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,114,101,115,117,108,116,46,114,115],"byte_start":182562,"byte_end":182567,"line_start":197,"line_end":197,"column_start":26,"column_end":31},"kind":{"variant":"Impl","fields":[40]},"from":{"krate":0,"index":944},"to":{"krate":2,"index":2606}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,115,116,114,101,97,109,46,114,115],"byte_start":183525,"byte_end":183529,"line_start":31,"line_end":31,"column_start":27,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":4336},"to":{"krate":0,"index":1012}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,115,116,114,101,97,109,46,114,115],"byte_start":184258,"byte_end":184263,"line_start":53,"line_end":53,"column_start":28,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":4366},"to":{"krate":0,"index":1016}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,115,116,114,101,97,109,46,114,115],"byte_start":184576,"byte_end":184577,"line_start":68,"line_end":68,"column_start":34,"column_end":35},"kind":{"variant":"Impl","fields":[41]},"from":{"krate":0,"index":217},"to":{"krate":0,"index":1012}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,115,116,114,101,97,109,46,114,115],"byte_start":184616,"byte_end":184617,"line_start":69,"line_end":69,"column_start":36,"column_end":37},"kind":{"variant":"Impl","fields":[42]},"from":{"krate":0,"index":219},"to":{"krate":0,"index":1016}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,115,116,114,101,97,109,46,114,115],"byte_start":184765,"byte_end":184771,"line_start":78,"line_end":78,"column_start":6,"column_end":12},"kind":{"variant":"Impl","fields":[43]},"from":{"krate":0,"index":1026},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,115,116,114,101,97,109,46,114,115],"byte_start":186805,"byte_end":186811,"line_start":148,"line_end":148,"column_start":19,"column_end":25},"kind":{"variant":"Impl","fields":[44]},"from":{"krate":0,"index":1026},"to":{"krate":1,"index":4336}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,115,116,114,101,97,109,46,114,115],"byte_start":190019,"byte_end":190025,"line_start":216,"line_end":216,"column_start":20,"column_end":26},"kind":{"variant":"Impl","fields":[45]},"from":{"krate":0,"index":1026},"to":{"krate":1,"index":4366}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8599,"byte_end":8607,"line_start":238,"line_end":238,"column_start":18,"column_end":26},"kind":{"variant":"Impl","fields":[46]},"from":{"krate":0,"index":1326},"to":{"krate":2,"index":2584}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9753,"byte_end":9762,"line_start":278,"line_end":278,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[47]},"from":{"krate":0,"index":1112},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,85,115,101,114,115,47,99,111,108,108,105,101,114,108,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,119,115,45,48,46,55,46,57,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12884,"byte_end":12891,"line_start":364,"line_end":364,"column_start":6,"column_end":13},"kind":{"variant":"Impl","fields":[48]},"from":{"krate":0,"index":1338},"to":{"krate":4294967295,"index":4294967295}}]}